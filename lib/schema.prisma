// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
//   output   = "../lib/generated/prisma"
// }

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// model user {
//   id        String   @id @default(uuid())
//   name      String
//   email     String   @unique
//   password  String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   orders    Order[]
// }

// model Category {
//   id        String   @id @default(uuid())
//   name      String   @unique
//   products  Product[]
// }

// model Product {
//   id          String     @id @default(uuid())
//   name        String      @db.VarChar(255)
//   brand       String?    @db.VarChar(255)
//   sku         String     @unique
//   barcode     String?    @db.VarChar(255)
//   price       Float
//   description String?   @db.LongText
//   images      Image?
//   categoryId  String
//   category    Category   @relation(fields: [categoryId], references: [id])
//   stock       Stock?
 
//   orderItems  OrderItem[]

//   @@index([categoryId, name, sku, price,barcode,brand])
// }

// model Image {
//   id        String   @id @default(uuid())
//   url       Json?
//   // color     String
//   productId String   @unique
//   product   Product  @relation(fields: [productId], references: [id],onDelete: Cascade)
// }

// model Stock {
//   id         String   @id @default(uuid())
//   productId  String   @unique
//   quantity   Int
//   updatedAt  DateTime @updatedAt
//   product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
// }

// model Order {
//   id          String      @id @default(uuid())
//   createdAt   DateTime    @default(now())
//   total       Float
//   orderItems  OrderItem[]
//   customerId  String?
//   userId      String?
//   status      String      @default("pending")
//   user        user?       @relation(fields: [userId], references: [id])
//   customer    Customer?   @relation(fields: [customerId], references: [id])
// }

// model OrderItem {
//   id        String   @id @default(uuid())
//   orderId   String
//   productId String
//   quantity  Int
//   price     Float
  
//   order     Order    @relation(fields: [orderId], references: [id])
//   product   Product  @relation(fields: [productId], references: [id])
// }

// model Customer {
//   id        String   @id @default(uuid())
//   name      String
//   phone     String?  @unique
//   email     String?  @unique
//   orders    Order[]
// }
